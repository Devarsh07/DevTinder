1) Ek middleware se dusre middleware jane ke liye humein next() function ko call karna hi padega.
2)If we use multiple Request Handlers in a single Middleware/routes then we have only send a response from one of the request handlers , we cant able to send multiple responses from the single middleware.
3) app.use("/route",rH1,rH2,rH3,rH4);where rH is a Request Handlers;
4)we can make array of any one , two , three or all in one array like and all give same results , below;
app.use("/route",rH1,[rH2,rH3],rH4) --(i)
app.use("/route",rH1,rH2,rH3,[rH4]) --(ii)
app.use("/route",[rH1,rH2,rH3,rH4]) --(iii)

here i,ii,iii all are giveing the same responses/results.

5)what is Middleware? is a funtion which perform any changes or action on the comming requests through a callback function.
6)What is Middlewares? Middlewares is chain of callback function(one after the other) which performs some changes on the requests comming from the client,
 - and after completeion of all functions the last callback functions sending the response . 
 And this last or the any one which send the respond is called the request handler function.
7)Request Handler function is the function which handled the request and then send the response as per the request received.
8) jahaan bhi request mein changes ho rhe hai or jahaan bhi next() samajh le wo middleware hai.
9)when we use app.use for middleware/route handler it mean its checked the given route only while the incomming route has some sub routes-
 - also its only checked the route used in app.use middleware.But in case of app.all the incomming routes must be same as route used-
 - in the app.all , aur ye dono hi all type of incomming request ko support karte hai bhale hi wo GET,PUT,PATCH ... ok.
10)adding the userAuth middleware only in /user/data Request Handler , bcoz the /user/login Request handler dont have to check -
 - that which user is authrized or not bcoz anybody can login to websites ok.
11) we cannot track en err above the err creation line since the js run line by line and also it is an single threaded , so-
 - only after the err created we can only track it or display its message ok.
12)Here we can track/catch the err or displaying the err by two methods like ,
i)first as we know app.use("/",()=>{}) always run bcoz of it a wild card any route must have "/" so its matches directly and-
 - run this wildcard request handler directly now since it matches and run directly so , ismein hum jo bhi likhenge wo humesha-
 - chalega , ok
ii)by using the try and catch block , jo bhi karna hai wo try mein likho and then catch karo err aur fir message or jo bhi karna-
 - karna chahte ho wo kardo, ok
13)suppose humne apna server run karwaya and uske baad hi database connection karwaya now think ki there is something happen shit-
 - jiske wajah se database to connect nhi ho paaya but server run hogya aur tumne ye notice bhi nhi kiya kyunki tumne dekha server to run ho gya chlo ab site par kaam karte hai-
- but ab tumhare site par multiple api's ki call ho rhi but wo saari call err show ho ri due to connection failed in database-
- now suppose ye api's call thousands mein ho to ye bahot hi bad hoga tumhare site ke liye and tumhare market mein banayi hui ijjat ke liye bhi-
-thats why hum ye sure karte hai pehle database connect ho jaaye and then server run ho ok.
